/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef security_TYPES_H
#define security_TYPES_H

#include <dsn/cpp/serialization_helper/dsn_types.h>
#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>

namespace dsn {
namespace security {

enum negotiation_status
{
    NS_INVALID = 0,
    NS_LIST_MECHANISMS = 1,
    NS_LIST_MECHANISMS_RESP = 2,
    NS_SELECT_MECHANISMS = 3,
    NS_SELECT_MECHANISMS_OK = 4,
    NS_INITIATE = 5,
    NS_CHALLENGE = 6,
    NS_RESPONSE = 7,
    NS_SUCC = 8,
    NS_FAIL = 9
};

extern const std::map<int, const char *> _negotiation_status_VALUES_TO_NAMES;

class negotiation_message;

typedef struct _negotiation_message__isset
{
    _negotiation_message__isset() : status(false), msg(false) {}
    bool status : 1;
    bool msg : 1;
} _negotiation_message__isset;

class negotiation_message
{
public:
    negotiation_message(const negotiation_message &);
    negotiation_message(negotiation_message &&);
    negotiation_message &operator=(const negotiation_message &);
    negotiation_message &operator=(negotiation_message &&);
    negotiation_message() : status((negotiation_status)0) {}

    virtual ~negotiation_message() throw();
    negotiation_status status;
    ::dsn::blob msg;

    _negotiation_message__isset __isset;

    void __set_status(const negotiation_status val);

    void __set_msg(const ::dsn::blob &val);

    bool operator==(const negotiation_message &rhs) const
    {
        if (!(status == rhs.status))
            return false;
        if (!(msg == rhs.msg))
            return false;
        return true;
    }
    bool operator!=(const negotiation_message &rhs) const { return !(*this == rhs); }

    bool operator<(const negotiation_message &) const;

    uint32_t read(::apache::thrift::protocol::TProtocol *iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

    virtual void printTo(std::ostream &out) const;
};

void swap(negotiation_message &a, negotiation_message &b);

inline std::ostream &operator<<(std::ostream &out, const negotiation_message &obj)
{
    obj.printTo(out);
    return out;
}
}
} // namespace

#endif
